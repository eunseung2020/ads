{"version":3,"sources":["Map.js","MapContainer.js","App.js","reportWebVitals.js","index.js"],"names":["kakao","window","Map","searchPlace","useState","map","setMap","useEffect","container","document","getElementById","options","center","maps","LatLng","level","undefined","drawMarker","data","Marker","position","y","x","services","Places","keywordSearch","result","status","Status","OK","bounds","LatLngBounds","forEach","extend","setBounds","id","style","width","height","MapContainer","input","setInput","search","setSearch","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"6LAEMA,EAAQC,OAARD,MA0CSE,EAxCL,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,YAAe,EACJC,qBADI,mBAClBC,EADkB,KACdC,EADc,KAmCvB,OAjCAC,qBAAU,WACN,IAAIC,EAAYC,SAASC,eAAe,OACpCC,EAAU,CACVC,OAAS,IAAIZ,EAAMa,KAAKC,OAAO,UAAW,YAC1CC,MAAO,GAGXT,EAAO,IAAIN,EAAMa,KAAKX,IAAIM,EAAWG,MACtC,IACHJ,qBAAU,WACN,QAASS,IAANX,EAAH,CAEA,IAWOY,EAAY,SAACC,GAChB,IAAIlB,EAAMa,KAAKM,OAAO,CAClBd,IAAIA,EACJe,SAAU,IAAIpB,EAAMa,KAAKC,OAAOI,EAAKG,EAAEH,EAAKI,OAIxC,IAAItB,EAAMa,KAAKU,SAASC,QAC7BC,cAActB,GAnBA,SAACuB,EAAQC,GAC1B,GAAGA,IAAU3B,EAAMa,KAAKU,SAASK,OAAOC,GAAG,CACvC,IAAIC,EAAS,IAAI9B,EAAMa,KAAKkB,aAE5BL,EAAOM,SAAQ,SAACd,GACZD,EAAWC,GACXY,EAAOG,OAAO,IAAIjC,EAAMa,KAAKC,OAAOI,EAAKG,EAAEH,EAAKI,OAEpDjB,EAAI6B,UAAUJ,UAYvB,CAAC3B,EAAYE,IAEZ,qBAAK8B,GAAG,MAAMC,MAAO,CAACC,MAAM,IAAIC,OAAO,QCnBhCC,EAnBM,WAAK,IAAD,EACEnC,mBAAS,IADX,mBAChBoC,EADgB,KACTC,EADS,OAEGrC,mBAAS,0DAFZ,mBAEhBsC,EAFgB,KAERC,EAFQ,KAQrB,OACI,gCACI,gCACI,uBAAOC,MAAOJ,EAAOK,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEC,OAAOH,UACtD,wBAAQI,QARF,WACdL,EAAUH,GACVC,EAAS,KAMD,6BAEJ,cAAC,EAAD,CAAKtC,YAAcuC,QCRhBO,MANf,WACE,OACE,cAAC,EAAD,KCQWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASC,eAAe,SAM1BwC,M","file":"static/js/main.062f74d4.chunk.js","sourcesContent":["import {useEffect, useState} from 'react';\r\n\r\nlet { kakao}= window;\r\n\r\nconst Map=({searchPlace})=>{\r\n    let [map,setMap] = useState();\r\n    useEffect(()=>{\r\n        let container = document.getElementById('map');\r\n        let options = {\r\n            center:  new kakao.maps.LatLng(33.450701, 126.570667), //지도의 중심좌표.\r\n            level: 3 \r\n        };\r\n\r\n        setMap(new kakao.maps.Map(container, options));\r\n    }, []);\r\n    useEffect(()=>{\r\n        if(map===undefined)\r\n        return;\r\n        const onSearchPlace =(result, status)=>{\r\n            if(status=== kakao.maps.services.Status.OK){\r\n                let bounds = new kakao.maps.LatLngBounds();\r\n\r\n                result.forEach((data)=>{\r\n                    drawMarker(data);\r\n                    bounds.extend(new kakao.maps.LatLng(data.y,data.x));\r\n                })\r\n                map.setBounds(bounds);\r\n            }\r\n        }\r\n        const  drawMarker =(data)=>{\r\n            new kakao.maps.Marker({\r\n                map:map,\r\n                position: new kakao.maps.LatLng(data.y,data.x)\r\n            });\r\n        }\r\n\r\n        let places =new kakao.maps.services.Places();\r\n        places.keywordSearch(searchPlace, onSearchPlace);\r\n    }, [searchPlace,map]);\r\n    return(\r\n        <div id=\"map\" style={{width:500,height:400}}></div>\r\n\r\n    )\r\n};\r\nexport default Map;","import { useState } from 'react';\r\nimport Map from './Map';\r\nconst MapContainer = ()=>{\r\n    let [input, setInput]= useState('');\r\n    let [search, setSearch]=useState('선린인터넷고등학교');\r\n\r\n    const searchClick=()=>{\r\n        setSearch(input);\r\n        setInput('');\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <input value={input} onChange={e => setInput(e.target.value)}/>\r\n                <button onClick={searchClick}>검색</button>\r\n            </div>\r\n            <Map searchPlace= {search}/>\r\n        </div>\r\n    )\r\n\r\n};\r\nexport default MapContainer","import MapContainer from './MapContainer';\n\nfunction App() {\n  return (\n    <MapContainer/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}